//
//  HomePresenter.swift
//  podium-iOS
//
<<<<<<< HEAD
=======
//  Created by Fernando Frances on 02/04/2018.
//  Copyright Â© 2018 Fernando Frances. All rights reserved.
//

import Foundation

//
//  HomePresenter.swift
//  podium-iOS
//
>>>>>>> 94b2e540e419fd2b1173dbed4cb590682d75efc3
//  Created by TomÃ¡s Ignacio Moyano on 3/24/18.
//  Copyright Â© 2018 Fernando Frances. All rights reserved.
//

import UIKit
import RxSwift

protocol HomeView: class {
    
    var title: String? { get set }
    
    func update(with sections: [HomeSection])
}

final class HomePresenter {
    
    private let repository: HomeRepositoryProtocol
    private let disposeBag = DisposeBag()
    
    weak var view: HomeView?
    
    init(repository: HomeRepositoryProtocol) {
        self.repository = repository
    }
    
    func didLoad() {
        
        view?.title = NSLocalizedString("Home", comment: "")
        loadContents()
    }
}

private extension HomePresenter {
    
    
    func loadSports() -> [Sport] {
        
        let futbol = Sport(_id: "1", name: "Fubtol", image: "nada", description: "Deporte con 2 arcos y una pelota", ranking: nil, rules: "Un referi", popularity: 9, activeTournaments: nil, openTournaments: nil, activeGames: nil, openGames: nil)
<<<<<<< HEAD

        let tennis = Sport(_id: "2", name: "Tennis", image: "nada", description: "Raqueta y red", ranking: nil, rules: "Hay que pasar la pelota del otro la de la red", popularity: 7, activeTournaments: nil, openTournaments: nil, activeGames: nil, openGames: nil)

=======
        
        let tennis = Sport(_id: "2", name: "Tennis", image: "nada", description: "Raqueta y red", ranking: nil, rules: "Hay que pasar la pelota del otro la de la red", popularity: 7, activeTournaments: nil, openTournaments: nil, activeGames: nil, openGames: nil)
        
>>>>>>> 94b2e540e419fd2b1173dbed4cb590682d75efc3
        let pingPong = Sport(_id: "3", name: "Ping Pong", image: "nada", description: "Deporte con dos paletas y una pequeÃ±a red", ranking: nil, rules: "Hay que pasar la pelota en del otro lado de la red en la mesa pequeÃ±a", popularity: 4, activeTournaments: nil, openTournaments: nil, activeGames: nil, openGames: nil)
        
        return [futbol,tennis, pingPong]
    }
    
    func loadContents() {
        let featuredGames = repository.featuredGames().map { $0.result }
        let featuredSports = repository.featuredSports().map { $0.result }
        
        Observable.combineLatest(featuredGames,featuredSports) { games, sports in
            return (games,sports)
<<<<<<< HEAD
        }
        .observeOn(MainScheduler.instance)
=======
            }
            .observeOn(MainScheduler.instance)
>>>>>>> 94b2e540e419fd2b1173dbed4cb590682d75efc3
            .subscribe(onNext: { [weak self] games, sports in
                guard let `self` = self else {
                    return
                }
                let sections = self.homeSections(games: games, sports: sports)
                self.view?.update(with: sections)
                }, onError: { error in
                    print("Error getting featured games/sports: \(error)")
<<<<<<< HEAD
                }, onDisposed: { [weak self] in
                    print("onDisposed")
            })
            .disposed(by: disposeBag)
        
        // Combine sports and games
//        repository.featuredGames()
//            .map { [weak self] response in
//                self?.homeSections(games: response.result,sports: (self?.loadSports())!) ?? []
//            }
//            .observeOn(MainScheduler.instance)
//            .subscribe(onNext: {[weak self] homeSections in
//                    print(homeSections)
//                    self?.view?.update(with: homeSections)
//                }, onError: { error in
//                    print("Error downloading featured games, \(error)")
//                }, onDisposed: { [weak self] in
//                    print("onDisposed")
//            })
//            .disposed(by: disposeBag)
=======
            }, onDisposed: { [weak self] in
                print("onDisposed")
            })
            .disposed(by: disposeBag)
>>>>>>> 94b2e540e419fd2b1173dbed4cb590682d75efc3
    }
    
    func homeSections(games: [Game], sports: [Sport]) -> [HomeSection] {
        var homeSections: [HomeSection] = []
        let gameItems = games.map { StripItem(game: $0) }
        homeSections.append(.strip(title: NSLocalizedString("Featured Games", comment: ""), items: gameItems))
        //Pass sports too in this function ðŸ‘†
        let sportItems = sports.map { StripItem(sport: $0) }
        homeSections.append(.strip(title: NSLocalizedString("Popular Sports", comment: ""), items: sportItems))
        return homeSections
    }
    
}
